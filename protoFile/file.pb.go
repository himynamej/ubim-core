// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file.proto

/*
Package fileserv is a generated protocol buffer package.

It is generated from these files:
	file.proto

It has these top-level messages:
	UploadStatus
	Chunk
	FileRequest
*/
package fileserv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatus struct {
	Message string `protobuf:"bytes,1,opt,name=Message,json=message" json:"Message,omitempty"`
	FileId  string `protobuf:"bytes,2,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
}

func (m *UploadStatus) Reset()                    { *m = UploadStatus{} }
func (m *UploadStatus) String() string            { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()               {}
func (*UploadStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

// The request message containing the user's name.
type Chunk struct {
	Content  []byte `protobuf:"bytes,1,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Token    string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Chunk) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Chunk) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type FileRequest struct {
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileRequest) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *FileRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadStatus)(nil), "fileserv.UploadStatus")
	proto.RegisterType((*Chunk)(nil), "fileserv.Chunk")
	proto.RegisterType((*FileRequest)(nil), "fileserv.FileRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Service_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Service_UploadClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Service_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/fileserv.Service/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type serviceDownloadClient struct {
	grpc.ClientStream
}

func (x *serviceDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Service_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[1], c.cc, "/fileserv.Service/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceUploadClient{stream}
	return x, nil
}

type Service_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type serviceUploadClient struct {
	grpc.ClientStream
}

func (x *serviceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

type ServiceServer interface {
	Download(*FileRequest, Service_DownloadServer) error
	Upload(Service_UploadServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Download(m, &serviceDownloadServer{stream})
}

type Service_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type serviceDownloadServer struct {
	grpc.ServerStream
}

func (x *serviceDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Upload(&serviceUploadServer{stream})
}

type Service_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type serviceUploadServer struct {
	grpc.ServerStream
}

func (x *serviceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileserv.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Service_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Service_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}

func init() { proto.RegisterFile("file.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xd5, 0x26, 0xed, 0x58, 0x28, 0x2c, 0x5a, 0x43, 0x7b, 0x91, 0x9c, 0x7a, 0x5a,
	0x8a, 0xa2, 0x27, 0x2f, 0xb6, 0x22, 0x7a, 0x50, 0x4a, 0x8a, 0x78, 0x94, 0x6d, 0x32, 0xb6, 0x21,
	0x9b, 0xdd, 0x98, 0xdd, 0xb4, 0xfd, 0xf9, 0xb2, 0x1b, 0x4a, 0x82, 0xb7, 0x79, 0xf3, 0xf8, 0x86,
	0x99, 0x37, 0x00, 0x3f, 0xa9, 0x40, 0x56, 0x94, 0xca, 0x28, 0xda, 0xb7, 0xb5, 0xc6, 0x72, 0x1f,
	0x3e, 0xc1, 0xf0, 0xb3, 0x10, 0x8a, 0x27, 0x6b, 0xc3, 0x4d, 0xa5, 0x69, 0x00, 0xfe, 0x3b, 0x6a,
	0xcd, 0xb7, 0x18, 0x90, 0x1b, 0x32, 0x1b, 0x44, 0x7e, 0x5e, 0x4b, 0x7a, 0x0d, 0xbe, 0xa5, 0xbe,
	0xd3, 0x24, 0xe8, 0x3a, 0xc7, 0xb3, 0xf2, 0x2d, 0x09, 0x05, 0xf4, 0x96, 0xbb, 0x4a, 0x66, 0x96,
	0x5d, 0x2a, 0x69, 0x50, 0x1a, 0xc7, 0x0e, 0x23, 0x3f, 0xae, 0x25, 0x1d, 0x83, 0xb7, 0xa9, 0xe2,
	0x0c, 0xcd, 0x09, 0xad, 0x15, 0x9d, 0xc2, 0xc0, 0xcd, 0x94, 0x3c, 0xc7, 0xe0, 0xcc, 0x59, 0x6e,
	0xb5, 0x0f, 0x9e, 0x23, 0xbd, 0x84, 0x9e, 0x51, 0x19, 0xca, 0xe0, 0xdc, 0x19, 0xb5, 0x08, 0x1f,
	0xe1, 0xe2, 0x25, 0x15, 0x18, 0xe1, 0x6f, 0x85, 0xda, 0xb4, 0xb7, 0x22, 0xed, 0xad, 0x1a, 0xba,
	0xdb, 0xa2, 0x6f, 0x8f, 0xe0, 0xaf, 0xb1, 0xdc, 0xa7, 0x31, 0xd2, 0x07, 0xe8, 0x3f, 0xab, 0x83,
	0xb4, 0xb7, 0xd3, 0x2b, 0x76, 0x0a, 0x84, 0xb5, 0x86, 0x4f, 0x46, 0x4d, 0xdb, 0x5d, 0x18, 0x76,
	0xe6, 0x84, 0xde, 0x83, 0x57, 0x27, 0x46, 0xff, 0xdb, 0x93, 0x71, 0xd3, 0x68, 0x87, 0x1a, 0x76,
	0x66, 0x64, 0x31, 0x87, 0x69, 0xaa, 0xd8, 0xb6, 0x2c, 0x62, 0x86, 0x47, 0x9e, 0x17, 0x02, 0x35,
	0xdb, 0xa1, 0x10, 0xea, 0xa0, 0x4a, 0x91, 0x2c, 0x46, 0xaf, 0xb6, 0xfe, 0xb2, 0xf5, 0xca, 0xbe,
	0x68, 0x45, 0x36, 0x9e, 0xfb, 0xd5, 0xdd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xa7, 0x82,
	0xce, 0xb9, 0x01, 0x00, 0x00,
}
